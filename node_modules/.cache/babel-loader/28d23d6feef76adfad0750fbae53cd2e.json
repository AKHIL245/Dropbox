{"ast":null,"code":"// // This optional code is used to register a service worker.\n// // register() is not called by default.\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister();\n//     });\n//   }\n// }","map":{"version":3,"sources":["C:/Users/Checkout/Desktop/Dropbox/src/serviceWorker.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// // This optional code is used to register a service worker.\r\n// // register() is not called by default.\r\n\r\n// // This lets the app load faster on subsequent visits in production, and gives\r\n// // it offline capabilities. However, it also means that developers (and users)\r\n// // will only see deployed updates on subsequent visits to a page, after all the\r\n// // existing tabs open on the page have been closed, since previously cached\r\n// // resources are updated in the background.\r\n\r\n// // To learn more about the benefits of this model and instructions on how to\r\n// // opt-in, read https://bit.ly/CRA-PWA\r\n\r\n// const isLocalhost = Boolean(\r\n//   window.location.hostname === 'localhost' ||\r\n//     // [::1] is the IPv6 localhost address.\r\n//     window.location.hostname === '[::1]' ||\r\n//     // 127.0.0.1/8 is considered localhost for IPv4.\r\n//     window.location.hostname.match(\r\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n//     )\r\n// );\r\n\r\n// export function register(config) {\r\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n//     // The URL constructor is available in all browsers that support SW.\r\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n//     if (publicUrl.origin !== window.location.origin) {\r\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\r\n//       // from what our page is served on. This might happen if a CDN is used to\r\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n//       return;\r\n//     }\r\n\r\n//     window.addEventListener('load', () => {\r\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n//       if (isLocalhost) {\r\n//         // This is running on localhost. Let's check if a service worker still exists or not.\r\n//         checkValidServiceWorker(swUrl, config);\r\n\r\n//         // Add some additional logging to localhost, pointing developers to the\r\n//         // service worker/PWA documentation.\r\n//         navigator.serviceWorker.ready.then(() => {\r\n//           console.log(\r\n//             'This web app is being served cache-first by a service ' +\r\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n//           );\r\n//         });\r\n//       } else {\r\n//         // Is not localhost. Just register service worker\r\n//         registerValidSW(swUrl, config);\r\n//       }\r\n//     });\r\n//   }\r\n// }\r\n\r\n// function registerValidSW(swUrl, config) {\r\n//   navigator.serviceWorker\r\n//     .register(swUrl)\r\n//     .then(registration => {\r\n//       registration.onupdatefound = () => {\r\n//         const installingWorker = registration.installing;\r\n//         if (installingWorker == null) {\r\n//           return;\r\n//         }\r\n//         installingWorker.onstatechange = () => {\r\n//           if (installingWorker.state === 'installed') {\r\n//             if (navigator.serviceWorker.controller) {\r\n//               // At this point, the updated precached content has been fetched,\r\n//               // but the previous service worker will still serve the older\r\n//               // content until all client tabs are closed.\r\n//               console.log(\r\n//                 'New content is available and will be used when all ' +\r\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n//               );\r\n\r\n//               // Execute callback\r\n//               if (config && config.onUpdate) {\r\n//                 config.onUpdate(registration);\r\n//               }\r\n//             } else {\r\n//               // At this point, everything has been precached.\r\n//               // It's the perfect time to display a\r\n//               // \"Content is cached for offline use.\" message.\r\n//               console.log('Content is cached for offline use.');\r\n\r\n//               // Execute callback\r\n//               if (config && config.onSuccess) {\r\n//                 config.onSuccess(registration);\r\n//               }\r\n//             }\r\n//           }\r\n//         };\r\n//       };\r\n//     })\r\n//     .catch(error => {\r\n//       console.error('Error during service worker registration:', error);\r\n//     });\r\n// }\r\n\r\n// function checkValidServiceWorker(swUrl, config) {\r\n//   // Check if the service worker can be found. If it can't reload the page.\r\n//   fetch(swUrl)\r\n//     .then(response => {\r\n//       // Ensure service worker exists, and that we really are getting a JS file.\r\n//       const contentType = response.headers.get('content-type');\r\n//       if (\r\n//         response.status === 404 ||\r\n//         (contentType != null && contentType.indexOf('javascript') === -1)\r\n//       ) {\r\n//         // No service worker found. Probably a different app. Reload the page.\r\n//         navigator.serviceWorker.ready.then(registration => {\r\n//           registration.unregister().then(() => {\r\n//             window.location.reload();\r\n//           });\r\n//         });\r\n//       } else {\r\n//         // Service worker found. Proceed as normal.\r\n//         registerValidSW(swUrl, config);\r\n//       }\r\n//     })\r\n//     .catch(() => {\r\n//       console.log(\r\n//         'No internet connection found. App is running in offline mode.'\r\n//       );\r\n//     });\r\n// }\r\n\r\n// export function unregister() {\r\n//   if ('serviceWorker' in navigator) {\r\n//     navigator.serviceWorker.ready.then(registration => {\r\n//       registration.unregister();\r\n//     });\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}