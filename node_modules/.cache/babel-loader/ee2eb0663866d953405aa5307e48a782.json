{"ast":null,"code":"//import axios from \"axios\";\n//import * as AWS from 'aws-sdk/global';\nglobal.fetch = require('node-fetch');\n\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js'); // export const dataService = {\n//     getUserData,\n//     getAdminData,\n//     uploadFile,\n//     deleteFile,\n//     getUser,\n// }\n\n\nexport const apiConfig = {\n  endpointURL: \"http://localhost:3001\"\n};\nexport function getUserData(userName) {\n  console.log(\"user\" + userName);\n  const requestOption = {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(\"\".concat(apiConfig.endpointURL, \"/getUserData/\").concat(userName), requestOption).then(res => {\n    console.log(res);\n    return res.json();\n  });\n}\n\nfunction getAdminData() {\n  const requestOption = {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(\"\".concat(apiConfig.endpointURL, \"/getAdminData\"), requestOption).then(res => {\n    console.log(res);\n    return res.json();\n  });\n}\n\nfunction uploadFile(inputFile, userData, description) {\n  const formData = new FormData();\n  formData.append('inputFile', inputFile);\n  formData.append('userName', userData);\n  formData.append('description', description);\n  console.log(\"UserNAme: \".concat(userData, \", desc: \").concat(description));\n  const requestOption = {\n    method: 'POST',\n    body: formData // headers: { \"Content-Type\": inputFile.type }\n\n  };\n  console.log(requestOption);\n  return fetch(\"\".concat(apiConfig.endpointURL, \"/upload_file\"), requestOption).then(res => {\n    console.log(res);\n    return res;\n  });\n}\n\nfunction deleteFile(fileName, id) {\n  const requestOption = {\n    method: 'DELETE',\n    body: JSON.stringify({\n      \"deleteFile\": fileName,\n      \"userId\": id\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(\"\".concat(apiConfig.endpointURL, \"/delete_file\"), requestOption);\n}\n\nfunction getUser() {\n  var poolData = {\n    UserPoolId: 'us-west-1_59p3CzMOg',\n    ClientId: '6lf5mkel9kcp68hog30i0p7gtp'\n  };\n  var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n  var cognitoUser = userPool.getCurrentUser();\n  console.log(\"cognito user\", cognitoUser);\n\n  if (cognitoUser != null) {\n    cognitoUser.getSession(function (err, session) {\n      if (err) {\n        alert(err.message || JSON.stringify(err));\n        return;\n      }\n\n      console.log('session validity: ' + session.isValid()); // NOTE: getSession must be called to authenticate user before calling getUserAttributes\n\n      cognitoUser.getUserAttributes(function (err, attributes) {\n        if (err) {\n          // Handle error\n          console.log(err);\n        } else {\n          // Do something with attributes\n          console.log(attributes);\n        }\n      });\n      /*             AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n                      IdentityPoolId: 'us-west-2_YBN0LoINM',\r\n                      Logins: {\r\n                          \r\n                          'cognito-idp.us-west-2.amazonaws.com/us-west-2_YBN0LoINM': session\r\n                              .getIdToken()\r\n                              .getJwtToken(),\r\n                      },\r\n                  });\r\n       */\n      // Instantiate aws sdk service objects now that the credentials have been updated.\n      // example: var s3 = new AWS.S3();\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/Checkout/Desktop/Dropbox/src/services/dataService.js"],"names":["global","fetch","require","AmazonCognitoIdentity","apiConfig","endpointURL","getUserData","userName","console","log","requestOption","method","headers","then","res","json","getAdminData","uploadFile","inputFile","userData","description","formData","FormData","append","body","deleteFile","fileName","id","JSON","stringify","getUser","poolData","UserPoolId","ClientId","userPool","CognitoUserPool","cognitoUser","getCurrentUser","getSession","err","session","alert","message","isValid","getUserAttributes","attributes"],"mappings":"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","sourcesContent":["//import axios from \"axios\";\r\n//import * as AWS from 'aws-sdk/global';\r\n\r\nglobal.fetch = require('node-fetch');\r\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js');\r\n\r\n// export const dataService = {\r\n//     getUserData,\r\n//     getAdminData,\r\n//     uploadFile,\r\n//     deleteFile,\r\n//     getUser,\r\n\r\n// }\r\n\r\nexport const apiConfig = {\r\n    endpointURL: \"http://localhost:3001\"\r\n}\r\n\r\nexport function getUserData(userName) {\r\n    console.log(\"user\"+userName);\r\n    const requestOption = {\r\n        method: 'GET',\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    }\r\n    return fetch(`${apiConfig.endpointURL}/getUserData/${userName}`, requestOption).then(res => {\r\n        console.log(res); \r\n        return res.json();\r\n    })\r\n}\r\n\r\nfunction getAdminData() {\r\n\r\n    const requestOption = {\r\n        method: 'GET',\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    }\r\n    return fetch(`${apiConfig.endpointURL}/getAdminData`, requestOption).then(res => {\r\n        console.log(res); \r\n        return res.json();\r\n    })\r\n}\r\n\r\nfunction uploadFile(inputFile, userData, description) {\r\n    const formData = new FormData();\r\n    formData.append('inputFile', inputFile);\r\n    formData.append('userName', userData);\r\n    formData.append('description', description);\r\n    console.log(`UserNAme: ${userData}, desc: ${description}`);\r\n    const requestOption = {\r\n        method: 'POST',\r\n        body: formData,\r\n       // headers: { \"Content-Type\": inputFile.type }\r\n    }\r\n    console.log(requestOption);\r\n    return fetch(`${apiConfig.endpointURL}/upload_file`, requestOption).then(res => {\r\n      console.log(res);\r\n        return res;\r\n    })\r\n}\r\nfunction deleteFile(fileName,id) {\r\n    const requestOption = {\r\n        method: 'DELETE',\r\n        body: JSON.stringify({\r\n            \"deleteFile\": fileName,\r\n            \"userId\": id\r\n        }),\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n    }\r\n    return fetch(`${apiConfig.endpointURL}/delete_file`, requestOption)\r\n}\r\n\r\n\r\nfunction getUser() {\r\n    var poolData = {\r\n        UserPoolId: 'us-west-1_59p3CzMOg', \r\n        ClientId: '6lf5mkel9kcp68hog30i0p7gtp', \r\n    };\r\n    var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\r\n    var cognitoUser = userPool.getCurrentUser();\r\n\r\n    console.log(\"cognito user\", cognitoUser);\r\n    \r\n    if (cognitoUser != null) {\r\n        cognitoUser.getSession(function(err, session) {\r\n            if (err) {\r\n                alert(err.message || JSON.stringify(err));\r\n                return;\r\n            }\r\n            console.log('session validity: ' + session.isValid());\r\n    \r\n            // NOTE: getSession must be called to authenticate user before calling getUserAttributes\r\n            cognitoUser.getUserAttributes(function(err, attributes) {\r\n                if (err) {\r\n                    // Handle error\r\n                    console.log(err);\r\n                } else {\r\n                    // Do something with attributes\r\n                    console.log(attributes);\r\n                }\r\n            });\r\n    \r\n/*             AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n                IdentityPoolId: 'us-west-2_YBN0LoINM',\r\n                Logins: {\r\n                    \r\n                    'cognito-idp.us-west-2.amazonaws.com/us-west-2_YBN0LoINM': session\r\n                        .getIdToken()\r\n                        .getJwtToken(),\r\n                },\r\n            });\r\n */    \r\n            // Instantiate aws sdk service objects now that the credentials have been updated.\r\n            // example: var s3 = new AWS.S3();\r\n        });\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}